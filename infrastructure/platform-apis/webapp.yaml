apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: cluster-web-application 
  labels: 
    homelab.yeseh.nl/llm-exposed: "true" 
    homelab.yeseh.nl/api-category: "applications"
  annotations:
    homelab.yeseh.nl/llm-description: |
      The ClusterWebApplication resource is a Kubernetes resource that defines a web application deployment.
      It includes a deployment, service, and optional ingress resource.
spec:
  schema:
    apiVersion: v1alpha1
    kind: ClusterWebApplication
    spec:
      name: string | required=true
      namespace: string | required=true
      image: string | default="nginx"
      port: integer | default=80
      ingress:
        enabled: boolean | default=false
    status:
      deploymentConditions: ${deployment.status.conditions}
      availableReplicas: ${deployment.status.availableReplicas}

  resources:
    - id: deployment
      template:
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${schema.spec.name}
          namespace: ${schema.spec.namespace}
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: ${schema.spec.name}
          template:
            metadata:
              labels:
                app: ${schema.spec.name}
            spec:
              containers:
                - name: ${schema.spec.name}
                  image: ${schema.spec.image}
                  ports:
                    - containerPort: ${schema.spec.port}

    - id: service
      template:
        apiVersion: v1
        kind: Service
        metadata:
          name: ${schema.spec.name}-service
          namespace: ${schema.spec.namespace}
        spec:
          selector: ${deployment.spec.selector.matchLabels} 
          ports:
            - protocol: TCP
              port: ${schema.spec.port} 
              targetPort: ${schema.spec.port} 

    - id: ingress
      includeWhen:
        - ${schema.spec.ingress.enabled} # Only include if the user wants to create an Ingress
      template:
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ${schema.spec.name}-ingress
          namespace: ${schema.spec.namespace}
          annotations:
            kubernetes.io/ingress.class: alb
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/target-type: ip
            alb.ingress.kubernetes.io/healthcheck-path: /health
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
            alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=true,stickiness.lb_cookie.duration_seconds=60
        spec:
          rules:
            - http:
                paths:
                  - path: "/"
                    pathType: Prefix
                    backend:
                      service:
                        name: ${service.metadata.name} # Use the service name
                        port:
                          number: ${schema.spec.port} 