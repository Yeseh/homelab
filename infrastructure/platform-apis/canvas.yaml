# Canvas is deployed with the platform identity and resides in the homelab-system namespace
# It should setup authentication for the canvas identity to take over for workload resources 
# A canvas corresponds to a single application environment, azure subscription, and namespace in the platform cluster
apiVersion: kro.run/v1alpha1
kind: ResourceGraphDefinition
metadata:
  name: canvas 
  labels: 
    homelab.yeseh.nl/llm-exposed: false
    homelab.yeseh.nl/api-category: foundation 
spec:
  schema:
    apiVersion: v1alpha1
    kind: Canvas 
    spec:
      workloadName: string | required=true
      environment: string | required=true
      location: string | required=true
      tenantId: string | required=true
      subscriptionId: string | required=true
      oidcIssuer: string | required=true
    status: 
      resourceGroupName: ${resourceGroup.status.name}
      azureLocation: ${resourceGroup.status.location}
      # deploymentIdentityId: ${identity.status.id}
      # deploymentIdentityClientId: ${identity.status.clientId}
      # keyvaultId: ${keyvault.status.id}
      # tenantId: ${schema.spec.tenantId}
      # subscriptionId: ${schema.spec.subscriptionId}

  resources:
    - id: resourceGroup
      template:
        apiVersion: resources.azure.com/v1api20200601
        kind: ResourceGroup
        metadata:
          name: rg-${schema.spec.workloadName}-${schema.spec.environment}
          namespace: homelab-system 
        spec:
          location: ${schema.spec.location}

    # Create a managed identity for the canvas that can be used to deploy resources
    - id: identity 
      template:
        apiVersion: managedidentity.azure.com/v1api20230131
        kind: UserAssignedIdentity
        metadata:
          name: id-${schema.spec.workloadName}-${schema.spec.environment}
          namespace: homelab-system 
        spec:
          location: ${resourceGroup.status.location}
          owner:
            name: ${resourceGroup.status.name}
          operatorSpec:
            configMaps:
              principalId:
                key: principalId
                name: canvas-config
              clientId:
                key: clientId 
                name: canvas-config

    # Assign the managed identity as the owner of the resource group
    - id: resourceGroupOwner
      template:
        apiVersion: authorization.azure.com/v1api20220401
        kind: ResourceGroup
        metadata:
          name: rg-${schema.spec.workloadName}-${schema.spec.environment}-owner 
          namespace: homelab-system 
        spec:
          principalId: ${identity.status.principalId}
          roleDefinitionId: 7a0b1c3d-4f2e-4a5b-8f3d-9c6e5f2b1c3d # Owner role
          scope: ${resourceGroup.status.id}

    # Create the canvas namespace
    - id: canvasNamespace 
      template:
        apiVersion: v1 
        kind: Namespace
        metadata:
          name: canvas-${schema.spec.workloadName}-${schema.spec.environment}
          labels: 
            toolkit.fluxcd.io/tenant: ${schema.spec.workloadName}-${schema.spec.environment}

    # Create a config map in the canvas namespace that holds the canvas specific information
    - id: configmap
      template:
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: canvas-config
          namespace: ${canvasNamespace.metadata.name}
          labels: 
            toolkit.fluxcd.io/tenant: ${schema.spec.workloadName}-${schema.spec.environment}
        data: 
          namespace: ${canvasNamespace.metadata.name}
          serviceAccountName: canvas-identity
          subscriptionId: ${schema.spec.subscriptionId}
          tenantId: ${schema.spec.tenantId}
    
    # Create a namespace-scoped credential for azure service operator
    # Refers to the canvas managed identity
    - id: asoCredential
      template:
        apiVersion: v1
        kind: Secret
        metadata:
          name: aso-credential
          namespace: ${canvasNamespace.metadata.name} 
        stringData:
          AZURE_SUBSCRIPTION_ID: ${schema.spec.subscriptionId} 
          AZURE_TENANT_ID:    ${schema.spec.tenantId} 
          AZURE_CLIENT_ID:    ${identity.status.clientId} 

    # The service account linked to the deployment identity
    # Used to enforce tenant separation in fluxcd deployments 
    - id: serviceAccount 
      template:
        apiVersion: v1
        kind: ServiceAccount
        metadata: 
          name: canvas-identity 
          namespace: ${canvasNamespace.metadata.name}
          labels: 
            toolkit.fluxcd.io/tenant: ${schema.spec.workloadName}-${schema.spec.environment}
          annotations:
            azure.workload.identity/client-id: ${identity.status.clientId} 
            azure.workload.identity/tenant-id: ${schema.spec.tenantId} 

    # Federate the canvas service account with the newly created user assigned identity
    - id: federatedCredential
      template:
        apiVersion: managedidentity.azure.com/v1api20220131preview
        kind: FederatedIdentityCredential
        metadata:
          name: fic-${schema.spec.workloadName}-${schema.spec.environment}-canvas
          namespace: ${canvasNamespace.metadata.name}
        spec:
          subject: system:serviceaccount:${canvasNamespace.metadata.name}:canvas-identity
          issuer: ${schema.spec.oidcIssuer}
          owner:
            name: ${identity.status.id} 
          audiences:
            - api://AzureADTokenExchange
    
    # This binds the flux reconciliation process for this namespace to the created federated managed identity
    - id: fluxRoleBinding
      template:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          labels:
            toolkit.fluxcd.io/tenant: ${schema.spec.workloadName}-${schema.spec.environment} 
          name: gotk-reconciler
          namespace: ${canvasNamespace.metadata.name}
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: ClusterRole
          name: cluster-admin
        subjects:
        - kind: User
          name: gotk:apps:reconciler
        - kind: ServiceAccount
          name: ${schema.spec.workloadName}-${schema.spec.environment} 
          namespace: ${canvasNamespace.metadata.name} 

    # Setup flux resources to sync the canvas namespace with the git repository
    - id: fluxRepository
      template:
        apiVersion: source.toolkit.fluxcd.io/v1
        kind: GitRepository
        metadata:
          name: ${schema.spec.workloadName}-${schema.spec.environment}
          namespace: ${canvasNamespace.metadata.name}
        spec:
          interval: 1m
          url: https://github.com/yeseh/homelab
          ref:
            branch: main

    - id: fluxSync
      template:
        apiVersion: kustomize.toolkit.fluxcd.io/v1
        kind: Kustomization
        metadata:
          name: ${schema.spec.workloadName}-${schema.spec.environment}
          namespace: ${canvasNamespace.metadata.name} 
        spec:
          serviceAccountName: canvas-identity 
          interval: 5m
          path: ./canvasses/${schema.spec.workloadName}/${schema.spec.environment}
          sourceRef:
            kind: GitRepository
            name: ${schema.spec.workloadName}-${schema.spec.environment}
            namespace: ${canvasNamespace.metadata.name} 
          prune: true